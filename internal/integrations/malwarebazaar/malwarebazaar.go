package malwarebazaar

import (
	"encoding/json"
	"fmt"
	"github.com/pygrum/siphon/internal/commands/sources"
	"github.com/pygrum/siphon/internal/db"
	"github.com/pygrum/siphon/internal/db/models"
	"github.com/pygrum/siphon/internal/logger"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)

const (
	Source = "malwarebazaar"
)

func NewFetcher() *Fetcher {
	f := &Fetcher{}
	mbData := sources.FindSource("MalwareBazaar")
	if mbData == nil {
		return nil
	}
	f.Endpoint = mbData.Endpoint
	f.ApiKey = mbData.ApiKey
	return f
}

func (f *Fetcher) GetRecent() {
	form := url.Values{
		"query":    {"get_recent"},
		"selector": {"time"},
	}
	resp, _ := f.BasicRequest(form)
	if resp == nil {
		return
	}
	body, _ := io.ReadAll(resp.Body)
	respObject := &Response{}
	if err := json.Unmarshal(body, respObject); err != nil {
		logger.Silentf("%v", err)
		return
	}
	if respObject.QueryStatus != "ok" {
		logger.Silentf("request to %s returned error %s", Source, respObject.QueryStatus)
		return
	}
	if err := addSamples(respObject); err != nil {
		logger.Silentf("failed to add new samples: %v", err)
	}
}

func addSamples(r *Response) error {
	for _, data := range r.Data {
		go func(data Item) {
			if db.SampleByHash(data.Sha256Hash) == nil {
				t, err := time.Parse(time.DateTime+" MST", data.FirstSeen+" UTC")
				if err != nil {
					logger.Silentf("could not parse time %s", data.FirstSeen)
					t = time.Time{}
				}
				sample := models.Sample{
					Name:       data.FileName,
					FileType:   data.FileType,
					FileSize:   data.FileSize,
					Signature:  data.Signature,
					Source:     Source,
					Hash:       data.Sha256Hash,
					UploadTime: t, // All times for Bazaar are UTC
				}

				if err := db.AddSample(&sample); err != nil {
					logger.Silentf("%v", err)
				}
			}
		}(data)
	}
	return nil
}

func (f *Fetcher) BasicRequest(form url.Values) (*http.Response, error) {
	r, err := http.NewRequest(http.MethodPost, f.Endpoint, strings.NewReader(form.Encode()))
	if err != nil {
		logger.Silentf("unable to create new request for %s: %v", Source, err)
		return nil, err
	}
	r.Header.Add("API-KEY", f.ApiKey)
	r.Header.Add("Content-Type", "application/x-www-form-urlencoded")
	client := &http.Client{}

	resp, err := client.Do(r)
	if err != nil {
		logger.Silentf("request failed: %v", err)
		return nil, err
	}
	return resp, nil
}

// Download downloads a sample via the API. It is triggered by the `get` command and returns an
// error on failure
func (f *Fetcher) Download(sha256Hash string) (io.ReadCloser, error) {
	form := url.Values{
		"query":       {"get_file"},
		"sha256_hash": {sha256Hash},
	}
	resp, err := f.BasicRequest(form)
	if err != nil {
		return nil, err
	}
	if resp.Header.Get("Content-Type") == "application/json" {
		body, err := io.ReadAll(resp.Body)
		if err != nil {
			return nil, err
		}
		respObject := &Response{}
		if err := json.Unmarshal(body, respObject); err != nil {
			return nil, err
		}
		return nil, fmt.Errorf("request to %s returned error %s", Source, respObject.QueryStatus)
	}
	return resp.Body, nil
}
